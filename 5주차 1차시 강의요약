이번 영상에서는 아무래도 Github를 배우는 첫 번째 콘텐츠인 만큼 Github를 이용해서 업무를 하는 그 흐름 전반을 먼저 간략하게 이야기를 해볼 생각이고요. 그다음에 제일 먼저 Github로 우리가 해야 될 것이 Github 홈페이지에서 remote 상태 그러니까 Github가 remote에 있는 저장소이기 때문에 repository라고 하는 remote 저장소를 만드는 것부터가 출발입니다. 그래서 remote의 repository 만드는 걸 먼저 해볼 거고, 그다음에 그 remote에 있는 repository를 나의 공간 로컬로 가져오는 그래서 가져와서 동기화하는 두 개가 똑같은 정보를 가지고 있도록 동기화하는 것들입니다. 그다음에 동기화되어 있으면 나는 로컬에서 고치게 되겠죠. 로컬에서 내가 고쳤을 때 그걸 다시 로컬에 있는 걸 리모트에 있는 리포트리로 동기화하는 방법. 그 과정에서 몇 가지 용어들이 있는데, 그런 용어들과 그다음에 나의 리모트 공간에 동기화를 해야 되는 거기 때문에 고치는 건 내 맘대로 해서 동기화는 권한이 필요해요. 내 계정이기 때문에 나의 계정에 관련된 보안 권한이 필요한데 비터브에서는 그걸 좀 심플하게 할 수 있도록 그리고 보안성은 강화한 형태인 아이디 패스워드 대신에 토큰이라는 걸 이용해서 프로그래밍처럼 비터브 저장소를 로컬해서 유머치로 금지화할 수 있는 영역을 처리할 수 있게 했는데 그 토큰을 얻는데 어떻게 하면 되는지 이런 것까지 설명할 예정입니다. 
01:09
Github의 전체적인 업무 흐름을 알아볼게요. Github를 우리가 사용했을 때 어떤 식으로 업무가 흘러가는지를 살펴보면 이렇게 복잡한 그림이 있어요. 이 모든 게 다 Github를 이용한 업무 흐름을 설명하는 건데 우리가 이렇게까지 다 자세하게 알려면 사실 한 학기 내내 Github만 해도 부족해요. 그렇기 때문에 우리는 좀 크게 크게 우리가 기본적으로 사용할 때 가장 처음 맞닥뜨리는 그 개념들에 대해서만 좀 큼지막하게 알고 넘어가면 될 것 같습니다. 먼저 화면에 표시된 이 큰 사각형을 보면은 이 영역이 지금 나의 드라이브예요. 그러니까 내 드라이브란 말은 외부와 공유되지 않는 내 피시라고 생각하면 편합니다. 여기서 작업하는 모든 것들은 이 복잡한 선을 따라서 이동하게 되는데 이 복잡한 선을 다 할 필요는 없고 이 선들이 그냥 의미하는 게 뭔지만 이해하면 될 것 같아요. 이 선들이 결국 내가 무슨 작업을 했을 때 내가 어떤 작업을 했는지 그리고 그걸로 인해서 내 파일들에 어떤 변화가 일어났는지를 추적하고 있다고 생각하면 됩니다. 그렇게 그 추적된 사항들이 기록이 되고 있는 거고, 일종의 버전 관리라고 생각하면 될 것 같아요. 내 드라이브에서는 버전 관리가 일어난다. 이렇게 생각하면 이 모든 내용들을 그냥 퉁쳐서 넘어갈 수 있을 것 같습니다. 위쪽에 작은 사각형을 보면 여기는 원격 저장소에 해당이 되는데 내가 하고 있는 업무를 남들과 공유를 할 때 결국 이 원격 저장소를 통해서 교류를 할 수 있게 돼요. 
02:04
그래서 크게 두 가지, Remote Report, Remote Report 스토리 2가지로 구분을 하게 되는데 자세한 건 뒤쪽에 나오게 되니까. 넘어가면 어찌 됐든 어딘가에 클라우드 형태로 원격 저장소가 있다. 이 정도만 알면 될 것 같아요. Github의 업무 흐름을 이 큰 그림을 가지고만 다시 이야기하면 NET PC에서 작업하는 게 어떤 방식에 의해서 버전 관리가 되고 있고 그 버전 관리가 되고 있는 그 NET PC의 기록들이 내가 어떤 명령을 내리게 되면 원격 저장소에 공유가 된다. 그리고 그 원격 저장소를 통해서 남들과 내 기록들을 공유하면서 협업을 할 수 있다. 일단은 이 정도로 이해를 하고 출발을 하면 될 것 같아요. 그래서 방금 설명했던 것처럼 원격 저장소 그리고 내 드라이브에 있는 저장소 통칭해서 그걸 repository라고 이야기를 하는데 앞으로는 repository라고 하거나 저장소라고 하거나 용을 섞어서 쓰게 될 것 같아요. 자연스럽게 어찌 됐든 우리는 이 repository를 만들어야 되는데 리포지토리를 만들기 위해서 우리는 디터브라는 사이트에 가입을 해야 돼요. 계정을 만들어야 돼요. 그래서 그 계정을 만드는 과정까지는 일일이 설명할 필요는 없을 것 같고, 요즘 회원 가입 못하는 사람 없으니까 일단 가입을 해서 계정이 있다고 가정을 하고 그 계정으로 로그인까지 했다고 가정하고 추가할게요. 
02:57
그럼 실제 화면에서 전체 크기 화면으로 어떤 걸 보게 되냐면 아마 여러분들이 로그인하면 이 화면이랑 비슷한 화면을 보게 될 건데 왼쪽 위에 보면 이렇게 리포지토리스라고 해가지고 뉴라는 게 보일 거예요. 여기 강의 자료에 방금 봤던 화면처럼. 그래서 여기에 있는 그걸 클릭을 하게 되면 이런 화면이 뜨게 됩니다. 그래서 이런 화면이 뜨면 여기에 여러분들이 정보를 기입을 해줘야 되는데 먼저 Repository의 이름을 뭘로 할지 알아서 정하면 되겠죠. 저 같은 경우에는 기초를 설명하기 위해서 만들었기 때문에 Repository Basic이라고 만들었어요. 그리고 여기에 설명 뭐 아무렇게나 적어도 되는데 저 같은 경우에는 테스트 베이직 리퍼리토리 펑션스라고 적었습니다. 그리고 기본으로 퍼블릭이라고 되어 있는데, 프라이빗의 경우에는 나만 볼 수 있는 거예요. 그러니까 사실 비터브의 용도와는 좀 벗어나죠. 이거는 이제 뭐 기업들 같은 곳에서 내부 작업을 내부원들끼리만 작업을 할 때 이제 프라이빗 리퍼리토리를 쓰게 되는 것이고. 우리는 굳이 그럴 필요가 없기 때문에 퍼플릭을 선택하면 되고 또 하나가 여기에 아마 체크가 안 되어 있을 텐데 with me 파일을 추가하겠다라고 체크를 해주세요. 왜냐하면, 어차피 만들어야 되기 때문에 그냥 기본으로 만들어진 걸 토대로 수정을 할 거기 때문에 이걸 체크를 해주면 될 것 같습니다. 
03:52
그리고 마지막으로, 선택이 끝났기 때문에 크레이트 리포지토리 해주면 이런 화면이 뜨면서 리포지토리가 완성이 되고요. 아마 이 화면이 보이기 전에 뭐 다른 화면이 보이고 나서 이 화면으로 넘어가겠지만, 어찌 됐든 우리가 확인해야 될 거는 내 계정 밑에 이런 리포리토리가 만들어졌는지를 체크를 하면 될 것 같아요. 그래서 리드미 파일이 이렇게 만들어져 있고 이 리드미 파일 의미하는 건 Github 리포리토리에서 이 설명을 readme md 우리 markdown 파일 배웠죠? 여기에 우리가 추가를 할 수 있어요. 그래서 이거를 수정하기 전에 초기 상태로 이런 식으로 만들어준 거예요. Github에 자동으로. 그다음에는 이제 우리가 Github에 먼저 repository를 만들었어요. 아까 맨 처음에 봤던 업무 흐름도로 다시 머리를 떠올려보세요. 기억을. 그러면 우리는 원격 저장소를 먼저 만든 거예요. 그렇다는 얘기는 내 드라이브에는 지금 아무것도 없다는 얘기가 되죠. 그래서 내 드라이브에 먼저 원격 저장소에 있는 내용 아무것도 없지만, 리드미터 엔드파일밖에 없지만, 그 원격 저장소를 내 로컬 드라이브로 가져와서 동기화를 시킬 겁니다. 그래서 그 과정은 이제 코랩 노트북을 이용을 해서 이제 소스 코드로 진행을 하게 될 텐데 이제 판선으로 진행을 하게 될 거예요. 그런데 우리가 구글 드라이브를 당연히 연결을 해야 되겠죠. 왜냐하면, 내 PC로 다운받는 건 더 힘들어. 
04:47
그래서 구글 드라이브와 Github 구글 드라이브를 내 로컬 저장소로 쓰고 Github를 내 원격 저장소로 쓸 거예요. 그래서 내 구글 드라이브에 마찬가지로 예전처럼 연동을 해야 되겠죠. 그래서 그 연동하는 방식 지난번에 설명했는데 소스 코드 내에서 바로 그냥 연동하게끔 하는 명령이 있어요. 이 두 줄 from google.glab의 import 드라이브를 해서 drive.mount 하고 이걸 적어주면 내가 이미 지난번에 구글 드라이브에 저장소를 한번 연결을 했기 때문에 자동으로 연결이 진행이 됩니다. 그런데 한 가지 로그인 과정을 거쳐야 되기 때문에 이런 메시지가 뜰 거예요. 오른쪽에 있는 이 링크를 타고 들어가면 내 계정을 선택해서 로그인을 하면 어떤 코드 하나를 발급해 줄 거예요. 그럼 그것을 복사하기를 해서 여기 빈칸에 컨트롤 V로 입력해주고 엔터를 눌러주면 밑에 있는 그림처럼 마운트가 완료됐다라고 메시지가 뜰 거예요. 그래서 앞으로는 구글 드라이브를 마운트할 때 따로 어디 폴더에 가서 클릭클릭하지 않고 소스 코드 상단부에 이렇게 삽입을 해두고 쓰게 될 거예요. 자 그래서 내 로컬 드라이브를 구글 드라이브로 쓰기로 했고 아운트도 했고 그러면 마치 내 디스크처럼 구글 드라이브를 넘나들 텐데 노트북에서는 파이썬 소스 코드만 쓰는 게 아니라 몇 가지 시스템 명령어도 사용을 가능하게 해줘요. 
05:42
그래서 대표적인 시스템 명령어 중에 Change Directory CD 명령어가 있는데, 이걸 이용을 하면 내가 지금 주시하고 있는 폴더를 바꿀 수가 있습니다. 그래서 우리 지난번에 봤던 것처럼 내 노트북이 저장되어 있는 이 폴더를 찾아가면 될 것 같아요. 주의해야 될 점은 이렇게 띄어쓰기가 있는 경우에 그냥 띄어쓰기를 하는 인식이 안 되고 꼭 역슬래시하고 띄어쓰기를 해줘야 띄어쓰기로 인식한다는 점을 주의해 주세요. 그것만 지키면 이렇게 내 노트북이 저장되어 있는 곳으로 디렉토리를 옮기고 거기에 내 원격 저장소에 있는 내용물들을 복사에다가 동기화를 시킬 거예요. 그렇게 복사해서 동기화하는 명령이 이 git 클론 명령인데 원래 이 git 클론 명령은 커맨드 창에서 파이썬에서 돌아가는 명령이 아니라 그보다 상위 OS 우리가 윈도우즈라면 윈도우즈 맥이라면 맥, 리눅스라면 리눅스 해서 실제 명령줄을 직접 입력하는 커맨드 명령 창에서 돌아가는 명령인데 코랩 노트북에서는 코랩이 돌아가는 그 머신의 명령을 코랩 노트북 노트북에서 쓸 수 있도록 지원을 해주고 있습니다. 방법은 앞에 간단한데 느낌표를 붙여주면 돼요. 그래서 내가 git clone이라는 명령을 쓰고 싶으면 앞에 느낌표를 붙여주고 git clone이라는 명령을 쓰면 소스 코드를 실행시키는 게 아니라 커맨드 창에서 내가 명령을 입력하는 것처럼 쓸 수가 있어요. 
06:35
이렇게 해주면 구글 드라이브와 연결된 디렉토리로 원격 저장소에 있던 내용물이 넘어오는데 명령에서 중요한 거는 그럼 어디에 있는 원격 저장소 내용물을 가져올 거냐가 중요하죠. 그게 오른쪽에 있는 원격 저장소 주소예요. 이 주소는 어떻게 할 수 있냐면 내 원격 저장소를 실제 기터브에 로그인해서 들어가서 오른쪽에 보면 이렇게 코드라는 초록색 그 버튼이 있고 이걸 눌러보면 밑에 이렇게 클론을 위해서 복사할 수 있는 주소가 나와 있어요. 그러면 여기 요 버튼을 눌러주면 자동으로 클릭보드의 주소가 카피가 되고 그러면 여기에다가 내가 붙여넣기 해주면 클론을 하는데 쉽게 할 수 있겠죠. 그럼 여기까지가 진행이 되면 원격 저장소에 있던 내용물이 다 카피가 되고 그럼 실제 카피가 됐는지는 다시 CD 명령어로 들어가 보면 되겠죠. 그럼 이렇게 디렉프리가 만들어져 있는지 확인을 해보면 새로 만들어져 있는 걸 확인을 할 수가 있습니다. 그다음에 이제 사실 이 뒤에 거는 이거는 생략을 해도 되는데 이게 무슨 명령인지만 알려드리자면 이제 이 폴더 안에 있는 내용물을 내가 DIS로 관리하겠다. 그러니까 버전 관리를 시작하겠다라는 의미고 그다음에 그 버전 관리하는 당사자가 이메일은 이걸 쓰고 유저네임은 이거다라고 선언을 해 준 거예요. 보통 이메일 주소와 이 유저네임은 우리가 Github를 가입할 때 썼던 그걸 사용을 하면 됩니다. 
07:30
이제 원격 저장소 만들었고 그다음에 그걸 내 로컬로 카피해왔어요. 그럼 그다음에 할 일은 내가 수정을 해봐야겠죠. 그래서 내 로컬에서 먼저 수정을 할 거예요. 아까 이야기했듯이 우리는 로컬을 구글 드라이브를 활용해서 쓰고 있죠. 그러려면 구글 드라이브에 접속을 해서 실제 내가 만들어 놓은 이 로컬 디렉토리대의 리포지토리 폴더를 찾아 들어가 보면 돼요. 그러면 우리가 처음 만들었던 리드미 파일이 카피돼서 들어와 있는 걸 알 수가 있습니다. 자 그러면 이 리듬이 md 파일 하나밖에 없기 때문에 우리가 수정을 해봐야 이것밖에 수정할 수가 없어요. 그래서 이걸 수정을 할 건데 원래는 사실 구글 드라이브에 있는 내용들은 먼저 다운받아서 거친 다음에 다시 업로드하고 이런 과정을 거쳐야 되는데 귀찮잖아요. 그러니까 구글 드라이브 내에서 바로 수정을 할 수 있는 방법을 쓸 건데 JPC에는 이미 Chrome Extension으로 이런 프로그램을 깔아놨어요. 여러분도 결국 readme md가 마크다운 파일이기 때문에 크롬에서 마크다운 파일을 바로 수정할 수 있는 구글 드라이브에서 바로 수정할 수 있는 그런 extension을 설치해 두면 편하게 구글 드라이브에서 바로 바로 파일을 고칠 수가 있어요. 
08:22
그래서 연결 앱 중에 크롬 extension을 추가 설치하는 쪽으로 가서 이 에디터, 마크다운 에디터를 추가를 해주고 그러면 그다음부터는 구글 드라이브에서 연결 앱으로 이걸 선택을 할 수가 있어요. 이걸 선택을 해서 자유롭게 수정을 해주면 될 것 같습니다. 저 같은 경우엔 내용을 이렇게 바꿔왔어요. 아까 어떤 식으로 되어 있었냐면 이렇게 이렇게 되어있었죠. 이렇게 되어있었던 내용인데 이거를 이렇게 바꿔봤어요. 내용을 이렇게 바꿨어요. 실제 보이는 건 이렇게 바꿔지겠죠. 그런데 여기까지 바꾼 거는 구글 드라이브 내에서만 지금 수정이 된 거예요. 로컬에서만 수정이 된 거죠. 그다음에는 이 commit이라는 걸 할 텐데 이 commit이 의미하는 거는 버전 관리를 하는 중간 저장점을 만들겠다라는 뜻이에요. 버전 하나를 올리겠다는 뜻이죠. 여기까지 한 내용을 종합해서 니가 새로운 버전으로 저장해 놓고 있어라는 뜻이죠. 그래서 이 2가지 명령을 하게 되는데 이 git add라는 명령은 어떤 파일들에 대한 변화를 내가 버전으로 관리할 건지를 결정하는 명령이에요. 스페이스를 띄워주고 점을 찍어주면 이 폴더 안에 있는 모든 파일을 다 하겠다는 뜻이에요. 보통은 귀찮아서 그냥 이렇게 많이 해요. 
09:19
어떤 특정 파일을 딱 지정해서 얘기할 수도 있는데, 보통은 그냥 이렇게 점 해서 이 폴더 내에 있는 모든 파일을 다 버전 관리하겠다라고 해주는 거고, 그다음에 git commit 해주고 마이너스 m 그다음에 띄고 이 큰따옴표 내에 메시지를 적을 수가 있는데, 이 메시지의 내용은 우리가 자유롭게 적으면 되지만 보통은 지금까지 변화된 내용이 어떤 의미를 가지고 있는지 여기 적어주면 돼요. 우리 같은 경우에는 지금 바뀐 내용이 readme.md 파일을 수정한 거기 때문에 이 커맨 메시지로 edit readme.md라고 적어준 거죠. 그래서 이렇게 2개 커맨들을 입력하고 이걸 실행을 하면 지금 이 폴더 안에 있는 모든 파일들이 등록이 되고 그 파일이 예전 기록된 버전 이 경우에는 우리가 클론에서 다운받았을 때 그 당시의 버전이 되겠죠. 그것과 지금 새로 기록하는 이 버전 사이에 어떤 변화가 있는지를 체크를 해요. 그래서 그것까지 그 변화까지 다 기록을 해놓는 거죠. 그래서 밑에 이렇게 간략하게 정리돼서 보여주게 됩니다. 그래서 이렇게 새 버전이 만들어졌다라는 결과를 보여주고 나면 이제 내 로커에서는 버전 관리가 끝난 거예요. 그래서 언제든지 어떤 명령을 통해서 이전 버전으로 돌아갈 수도 있고 다시 앞 버전으로 넘을 수도 있고 하는 상태가 된 거죠. 이 버전 관리에 대한 사항은 마찬가지로 우리가 배워야 될 게 굉장히 많고 이 수업에서 커버해야 될 게 너무 많아지기 때문에 버전 관리에 대한 내용은 이보다 더 자세히 다루지는 않을 거야. 이렇게 커밋으로 버전을 누적해서 쌓을 수 있다. 
10:17
정도만 수업 시간에는 배울 거고, 혹시 버전 관리에 대해서 좀 더 관심 있는 학생은 Github에서 커밋을 어떻게 하고 버전 관리를 어떻게 하는지 구글 검색을 통해서 좀 더 알아보면 내용이 그렇게 많이 복잡하지는 않으니까 도움이 될 수 있을 것 같아요. 그래서 이제까지의 모든 기록된 버전을 다 확인해보고 싶으면 이렇게 git log라는 명령을 치면 이제까지 커밋이 어떻게 이루어졌는지 그 내역을 쭉 살펴볼 수가 있습니다. 이제 내 로컬에서 할 수 있는 건 다 끝났어요. 원격 저장소에서 로컬로 처음에 다운받았고 카피를 해왔고 그다음에 우리가 수정을 했고 그다음에 수정 성사항을 커밋을 통해서 기록해서 버전 업데이트도 했고 버전 기록 업데이트도 했고 이제 남은 거는 이 업데이트된 거를 다시 원격 저장소에 반영만 해주면 돼요. 그런데 반영을 해주려면 넥키터브에 접근을 해서 거기 있는 내용을 써야 되기 때문에 결국 넥키터브 계정의 권한을 획득해야 돼요. 그때마다 다 로그인을 계속할 수는 없으니까 깃터브에서는 편의 기능 중의 하나로 계정의 토큰이라는 것을 발급해서 어떤 기간 내에 이 토큰을 가지고 있으면 로그인한 것과 마찬가지로 인정해주겠다라는 기능을 제공을 해주고 있습니다. 그래서 이렇게 Github에서 세팅에 Developer Setting이라는 게 있는데, 거기에 가서 Personal Assess Token 이 메뉴로 들어가면 이렇게 새 토큰을 만들겠다라는 버튼이 보여요. 
11:10
그래서 이 새 토큰을 어떻게 만들 거냐 무엇을 위한 토큰인지 여기에 노트를 간단하게 적어주고 얼마 동안에 효력을 가지든지 왜냐하면, 이걸 무기한으로도 할 수 있는데, 보통은 이걸 추천하지 않아요. 왜냐하면, 이게 유출이 될 수도 있고 그렇기 때문에 보통은 기한을 이렇게 한정을 해줍니다. 그래서 우리가 학기 끝날 때까지 90일 정도니까 보통 90일로 해두면 될 것 같고, 이때 쭉 어떤 권한을 부여할 것인지 쭉쭉 나와 있는데, 밑에 있는 기능들은 우리가 아직 거의 쓰지 않을 거기 때문에 우리는 거의 rep 에 해당하는 체크박스만 클릭해주면 이게 다 선택이 돼요. 이렇게 토큰을 발급해주면 다음 화면으로 넘어가면 바로 그 토큰이 화면이 떠요. 클립포드에 복사할 수 있도록 지원을 해줘요. 주의사항이 클립포드에 복사를 해서 내가 어디에 기록을 잘 해두지 않으면 그걸 잊어버리면 다시 확인할 수 있는 길이 없어요. 이 토큰을 없애버리고 새로 발급받아요. 그렇게 좀 귀찮아지기 싫으면 이 토큰 발급받을 토큰을 좀 남들이 못 보는 곳에 메모장에 비밀 폴더 같은 데 파일로 저장을 한다든지 이런 식으로 기록을 해두는 게 좋습니다. 그럼 이 토큰을 이용하면 이 git Remote라는 명령을 이용을 해서 내가 내 로컬 폴더를 내 로컬 드라이브에 있는 내용물을 반영할 그 위치를 지정을 할 수가 있어요. 그래서 이 리포 베이직이라는 이 문구는 그냥 닉네임이라고 생각하세요. 내가 연결할 저장소의 닉네임. 닉네임은 리포 베이직으로 하겠다. 
12:08
그리고 여기에 내 계정명 그리고 콜론 그리고 콜론 그다음에 앱 Github com 그 이후에 이제 내가 반영한 보자는 리포지토리의 URL 뒷부분을 가져오면 앞으로 이 리포지토리에 이 계정명으로 이 토큰의 권한을 가지고 내가 계속 로컬에 있는 걸 반영을 할 건데 이 닉네임을 그때그때 이걸 다 계속하기 귀찮으니까 이 닉네임에 내가 저장을 해놓겠다는 얘기예요. 그래서 이렇게 등록을 해놓으면 그다음 명령 git push라는 명령을 가지고 여기 마이너스 u는 그냥 넣으면 되는 옵션이고 내가 리포 베이직으로 등록을 해놓은 원격 저장소에 권한까지 이미 토큰으로 확보를 해놨기 때문에 이 저장소에 지금 메인 브랜치, 이건 나중에 브랜치에 관해서 설명하겠지만, 지금은 현재 메인 브랜치밖에 없어요. 그래서 지금 내가 로컬에서 작업한 메인 브랜치를 반영을 하겠다는 뜻이에요. 그래서 반영을 하겠다고 했으니까 파일이 업로드가 되겠죠. 그래서 쭉쭉 새로운 파일이 업로드가 돼서 우리 같은 경우에는 위드미닷 MD 파일을 수정했기 때문에 위드미닷 MD 파일이 업로드가 새로 되겠죠. 그래서 덮어 집어지게 되고 푸시가 끝나게 됩니다. 그러면 푸시가 완료가 되면 실제 기터브에 들어가 보면 예전 내용이 이렇게 우리가 새로 녹화해서 작업했던 내용으로 반영이 돼서 바뀌어 있는 것을 확인을 할 수가 있어요. 
13:00
이렇게까지 하면 기본적으로 우리가 기터브에 가장 기초적인 기능, 원격 저장소를 활용을 해서 내 로컬에 있는 작업 내용을 원격 저장소를 통해 남들과 공유할 준비를 만들어 놓는 이 작업까지가 끝나게 되겠습니다.
